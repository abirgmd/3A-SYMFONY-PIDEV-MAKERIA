{% extends 'base2.html.twig' %}

{% block title %}Product Details - {% endblock %}

{% block stylesheets %}
<link href="https://fonts.googleapis.com/css?family=Joti+One" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/aos/2.3.4/aos.css" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/aos/2.3.4/aos.js"></script>
<script>AOS.init();</script>

<style>
.container {
    max-width: 1100px;
    margin: 0 auto;
    padding: 20px;
    font-family: 'Joti One', cursive;
  }

  .card-horizontal {
    display: flex;
    flex-wrap: nowrap;
    background: #f4f4f4;
    border: 1px solid #962071;
    border-radius: 8px;
    padding: 20px;
    gap: 30px;
    justify-content: space-between;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
  }

  .card-horizontal:hover {
    transform: scale(1.02);
  }

  .image-gallery {
    flex: 0 0 35%;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 10px;
  }

  .image-gallery img {
    border: 1px solid #962071;
    cursor: pointer;
    transition: transform 0.2s ease;
  }

  .image-gallery .main-image {
    width: 100%;
    height: 350px;
    object-fit: cover;
    margin-bottom: 15px;
    border-radius: 8px;
  }

  .image-gallery .thumbnail {
    width: 100px;
    height: 100px;
    object-fit: cover;
    border-radius: 8px;
  }

  .thumbnail-container {
    display: flex;
    gap: 10px;
  }

  .card-body-horizontal {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .product-name {
    font-weight: bold;
    font-size: 2.5rem;
    color: #962071;
    margin-bottom: 15px;
  }

  .product-description {
    font-weight: normal;
    font-size: 1.2rem;
    margin-bottom: 15px;
    color: #333;
  }

  .price {
    font-size: 1.6rem;
    font-weight: bold;
    margin-bottom: 20px;
  }

  .form-group label {
    font-weight: bold;
  }

  .form-group select,
  .form-group input {
    font-size: 1rem;
    padding: 10px;
    border-radius: 5px;
    transition: border-color 0.3s ease;
  }

  .quantity-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .evaluation-form {
    background-color: #f8f9fa;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-top: 40px;
    display: none; /* Initially hidden */
  }

  .btn-primary {
    background: linear-gradient(90deg, #b11d85, #962071);
    color: #fff;
    border: none;
    transition: transform 0.2s, background-color 0.3s ease-in-out;
  }

  .btn-primary:hover {
    background-color: #962071;
  }

  .evaluation-form h3 {
    color: #b11d85;
    margin-bottom: 20px;
  }

  .evaluation-form label {
    font-weight: bold;
    color: #333;
  }

  .evaluation-form input, .evaluation-form textarea, .evaluation-form select {
    margin-bottom: 15px;
    border-radius: 5px;
    border: 1px solid #ddd;
    padding: 10px;
    width: 100%;
    background-color: #fff;
  }

  .evaluation-form button {
    background-color: #b11d85;
    color: white;
    border-radius: 5px;
    padding: 12px;
    font-size: 16px;
    width: 100%;
  }

  .review-card {
    background-color: #fff;
    padding: 20px;
    margin-bottom: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .review-card h5 {
    font-size: 1.6rem;
    color: #962071;
    margin-bottom: 15px;
  }

  .review-card p {
    font-size: 1.1rem;
    color: #555;
  }

  .review-card .rating {
    font-size: 1.2rem;
    color: #ffd700;
  }

  .review-card .review-date {
    font-size: 1rem;
    color: #aaa;
    margin-top: 10px;
  }

  .button-container {
    text-align: center;
    margin-top: 20px;
  }
</style>
{% endblock %}

{% block body %}
<section id="photograph" class="clearfix">
  <div class="container">
    <div class="row">
      <div class="photograph clearfix">
        <p>
          <a href="{{ path('app_produits') }}">Produits</a> > 
          <span class="photo_tab">{{ produit.nomprod }}</span>
        </p>
      </div>
    </div>
  </div>
</section>

<div class="container">
  <div class="card-horizontal">
    <!-- Product Display Section -->
    <div class="image-gallery">
      <img src="{{ produit.imageLarge }}" class="main-image" alt="Large Product">
      <div class="thumbnail-container">
        <img src="{{ produit.imageLarge }}" class="thumbnail" alt="Thumbnail 1" onclick="changeImage(0)">
        <img src="{{ produit.imageSmall1 }}" class="thumbnail" alt="Thumbnail 2" onclick="changeImage(1)">
        <img src="{{ produit.imageSmall2 }}" class="thumbnail" alt="Thumbnail 3" onclick="changeImage(2)">
        <img src="{{ produit.imageSmall3 }}" class="thumbnail" alt="Thumbnail 4" onclick="changeImage(3)">
      </div>
    </div>

    <div class="card-body-horizontal">
      <h2 class="product-name">{{ produit.nomprod }}</h2>
      <p class="product-description">{{ produit.descriptionprod }}</p>
      <ul class="advantages-list">
        {% for avantage in produit.avantages|split('\n') %}
          <li>âœ“ {{ avantage }}</li>
        {% endfor %}
      </ul>
      <div class="price">{{ produit.prixprod|number_format(2, '.', ',') }}DT</div>

      <div class="form-group">
        <label for="size">Select Size:</label>
            <h3 class="product-size">{{ produit.sizeprod }}</h3>
      </div>

      <div class="quantity-container">
        <div>
          <label for="quantity">Quantity:</label>
          <div class="input-group">
            <button class="btn btn-outline-secondary" type="button">-</button>
            <input type="text" class="form-control text-center" value="1" style="max-width: 60px;">
            <button class="btn btn-outline-secondary" type="button">+</button>
          </div>
        </div>
        <a href="#" class="btn btn-primary">Add to Cart</a>
      </div>
       <div class="button-container">
    <button id="addReviewBtn" class="btn btn-primary">Add Review</button>
  </div>
    </div>
  </div>

<!-- Formulaire d'Ã©valuation qui sera affichÃ© au clic -->
  <div id="reviewForm" class="evaluation-form">
    <h3>ADD A REVIEW</h3>
    {{ form_start(form, {'attr': {'class': 'form-styled', 'novalidate': 'novalidate'}}) }}

    {% if app.session.flashbag.has('success') %}
        <div class="alert alert-success">
            {{ app.session.flashbag.get('success')[0] }}
        </div>
    {% elseif app.session.flashbag.has('error') %}
        <div class="alert alert-danger">
            {{ app.session.flashbag.get('error')[0] }}
        </div>
    {% endif %}

    <div class="form-group">
        {{ form_row(form.userName, {'attr': {'class': 'form-control', 'readonly': 'readonly', 'novalidate': 'novalidate'}}) }}
    </div>
    <div class="form-group">
        {{ form_row(form.userMail, {'attr': {'class': 'form-control', 'readonly': 'readonly', 'novalidate': 'novalidate'}}) }}
    </div>
    <div class="form-group">
        {{ form_row(form.reviewText, {'attr': {'class': 'form-control', 'novalidate': 'novalidate'}}) }}
    </div>
    <div class="form-group">
        {{ form_row(form.note, {'attr': {'class': 'form-control', 'novalidate': 'novalidate'}}) }}
    </div>
    <div class="form-group">
        {{ form_row(form.datePublication, {'attr': {'class': 'form-control', 'readonly': 'readonly', 'novalidate': 'novalidate'}}) }}
    </div>

    <div class="button-container">
        <button type="submit" class="btn btn-primary">Submit</button>
        <br></br>
    </div>

    {{ form_end(form) }}
  </div>
<section class="container mt-5">
  <h3>Product Reviews</h3>
  {% for evaluation in evaluations %}
  <div class="review-card">
    <h5>{{ evaluation.userName }}</h5>
    <p>{{ evaluation.reviewText }}</p>
    <div class="rating">
      {% for i in 1..evaluation.note %}
        â˜…
      {% endfor %}
    </div>
    <small>Posted on {{ evaluation.datePublication|date('F d, Y') }}</small>

    <!-- Boutons Modifier/Supprimer visibles uniquement si l'utilisateur est connectÃ© et est l'auteur -->
    {% if app.user and app.user.id == evaluation.user.id %}
    <div class="button-container">
      <a href="{{ path('app_evaluation_edit', {'id': evaluation.id}) }}" class="btn btn-warning">
        <i class="fas fa-edit"></i> Modifier
      </a>
      <form method="post" action="{{ path('app_evaluation_delete', { id: evaluation.id }) }}" style="display:inline-block;">
        <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ evaluation.id) }}">
        <button type="submit" class="btn btn-danger" onclick="return confirm('ÃŠtes-vous sÃ»r de vouloir supprimer cette Ã©valuation ?');">
          <i class="fas fa-trash"></i> Supprimer
        </button>
      </form>
    </div>
    {% endif %}
<h4>Reacts : </h4>
    <!-- Boutons Like/Dislike -->
    <div class="like-dislike mt-2">
      <button class="like-btn btn btn-outline-success" data-id="{{ evaluation.id }}" data-action="like">
        ðŸ’– {{ evaluation.likes }}
      </button>
      <button class="dislike-btn btn btn-outline-danger" data-id="{{ evaluation.id }}" data-action="dislike">
        ðŸ’” {{ evaluation.dislikes }}
      </button>
    </div>
  </div>
  {% else %}
    <p>No reviews yet. Be the first to review!</p>
  {% endfor %}
</section>



</div>
{% endblock %}

{% block javascripts %}
<script>
      document.querySelectorAll('.like-btn, .dislike-btn').forEach(button => {
            button.addEventListener('click', function () {
                const evaluationId = this.dataset.id; // RÃ©cupÃ¨re l'ID de l'Ã©valuation
                const action = this.dataset.action; // "like" ou "dislike"

                // Effectue une requÃªte AJAX vers l'endpoint pour les Ã©valuations
                fetch(`/evaluation/${evaluationId}/${action}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json', // Format JSON
                        'X-Requested-With': 'XMLHttpRequest' // Identifie une requÃªte AJAX
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Une erreur est survenue lors de la requÃªte.');
                    }
                    return response.json(); // Transforme la rÃ©ponse en JSON
                })
                .then(data => {
                    if (data.success) {
                        // Met Ã  jour les compteurs de "likes" et "dislikes" pour l'Ã©valuation
                        const likeBtn = document.querySelector(`.like-btn[data-id="${evaluationId}"]`);
                        const dislikeBtn = document.querySelector(`.dislike-btn[data-id="${evaluationId}"]`);

                        likeBtn.textContent = `ðŸ’– ${data.likes}`;
                        dislikeBtn.textContent = `ðŸ’” ${data.dislikes}`;
                    } else {
                        // Affiche une alerte en cas d'erreur cÃ´tÃ© serveur
                        alert('Erreur : ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Erreur lors de la requÃªte :', error);
                    alert('Une erreur inattendue sâ€™est produite. Veuillez rÃ©essayer.');
                });
            });
        });
document.getElementById("addReviewBtn").addEventListener("click", function() {
    var reviewForm = document.getElementById("reviewForm");
    reviewForm.style.display = reviewForm.style.display === "none" ? "block" : "none";
  });

  let images = [
    '{{ produit.imageLarge }}',
    '{{ produit.imageSmall1 }}',
    '{{ produit.imageSmall2 }}',
    '{{ produit.imageSmall3 }}'
  ];
  let currentIndex = 0;

  function changeImage(index) {
    currentIndex = index;
    document.querySelector('.main-image').src = images[currentIndex];
  }
</script>
<script>
document.addEventListener('DOMContentLoaded', () => {
    const deleteButtons = document.querySelectorAll('.delete-btn');

    deleteButtons.forEach(button => {
        button.addEventListener('click', function () {
            const evaluationId = this.dataset.id;
            const csrfToken = this.dataset.token;

            if (!confirm('Are you sure you want to delete this evaluation?')) {
                return;
            }

            fetch(`/evaluation/${evaluationId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': csrfToken
                },
                body: JSON.stringify({ _token: csrfToken })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    alert('Evaluation deleted successfully!');
                    location.reload(); // Recharge la page pour reflÃ©ter les changements
                } else if (data.error) {
                    alert(`Error: ${data.error}`);
                }
            })
            .catch(error => {
                console.error('Error during deletion:', error);
                alert('An unexpected error occurred. Please try again.');
            });
        });
    });
});

</script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const deleteButtons = document.querySelectorAll('.delete-btn');

    deleteButtons.forEach(button => {
      button.addEventListener('click', function () {
        const evaluationId = this.dataset.id;
        const csrfToken = this.dataset.token;

        if (confirm('Are you sure you want to delete this item?')) {
          fetch(`/evaluation/delete/${evaluationId}`, {
            method: 'POST',
            headers: {
              'X-Requested-With': 'XMLHttpRequest',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ _token: csrfToken })
          })
          .then(response => {
            if (response.ok) {
              // Supprimer l'Ã©lÃ©ment du DOM
              this.closest('.review-card').remove();
              alert('Review deleted successfully.');
            } else {
              return response.json().then(data => {
                throw new Error(data.error || 'Something went wrong.');
              });
            }
          })
          .catch(error => alert(error.message));
        }
      });
    });
  });
</script>

{% endblock %}
